// Generated by CoffeeScript 1.7.1
(function() {
  mve.MVE_TimeControls = mve.MVE_Plugin.extend({
    defaults: {}
  }, {
    init: function(element, options) {
      var baseTime, viewData;
      this._super();
      console.log('MVE_TimeControls');
      viewData = this.options.viewData;
      this.SMALL_SEEK = .05;
      this.LARGE_SEEK = .10;
      baseTime = "00:00:00";
      this.zeroTimeObs = can.compute(baseTime);
      this.currentTimeObs = can.compute(baseTime);
      this.totalTimeObs = can.compute(baseTime);
      viewData.attr('zeroTimeObs', this.zeroTimeObs);
      viewData.attr('currentTimeObs', this.currentTimeObs);
      viewData.attr('totalTimeObs', this.totalTimeObs);
      this.playbackRates = new can.List();
      viewData.attr('playbackRates', this.playbackRates);
      return this.currentPlaybackRate = 1;
    },
    onPlayerReady: function() {
      var allPlaybackRates, playbackRate, _i, _len, _results;
      this._super();
      this.totalTimeObs(mve.timeInHoursMinsSeconds(this.duration));
      this.zeroTimeObs(mve.timeInHoursMinsSeconds(0));
      allPlaybackRates = this.player.getAvailablePlaybackRates();
      _results = [];
      for (_i = 0, _len = allPlaybackRates.length; _i < _len; _i++) {
        playbackRate = allPlaybackRates[_i];
        if (playbackRate <= 1) {
          _results.push(this.playbackRates.push(new can.Map({
            rate: playbackRate,
            active: playbackRate === 1
          })));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    onPlayerInterval: function() {
      return this.updateTimeDisplay();
    },
    onPlayerStateChange: function(newState, oldState) {
      var playIcon;
      playIcon = this.element.find('.play-icon');
      if (newState === mve.PS.PLAYING) {
        playIcon.removeClass('fa-play');
        return playIcon.addClass('fa-pause');
      } else {
        playIcon.removeClass('fa-pause');
        return playIcon.addClass('fa-play');
      }
    },
    updateTimeDisplay: function() {
      var currentTime;
      currentTime = this.player.getCurrentTime();
      return this.currentTimeObs(mve.timeInHoursMinsSeconds(currentTime));
    },
    ".playback-rate click": function(el, ev) {
      var rate;
      rate = el.data('rate');
      this.playbackRates.forEach(function(el) {
        return el.attr('active', el.rate === rate.rate);
      });
      return this.player.setPlaybackRate(rate.attr('rate'));
    },
    ".seek-icon click": function(el, ev) {
      var className, mappedVal, newTime, seekMap, seekVal, _i, _len, _ref;
      seekMap = {
        "fa-angle-double-left": -this.LARGE_SEEK,
        "fa-angle-left": -this.SMALL_SEEK,
        "fa-angle-right": this.SMALL_SEEK,
        "fa-angle-double-right": this.LARGE_SEEK
      };
      seekVal = void 0;
      _ref = el.get(0).classList;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        className = _ref[_i];
        mappedVal = seekMap[className];
        if (mappedVal !== void 0) {
          seekVal = mappedVal;
        }
      }
      if (seekVal === void 0) {
        console.error("Doom");
      }
      this.player.pauseVideo();
      newTime = this.player.getCurrentTime() + seekVal;
      return this.player.seekTo(newTime);
    },
    ".play-icon click": function(el, ev) {
      var _ref, _ref1;
      if ((_ref = this.options.playerState()) === mve.PS.PAUSED || _ref === mve.PS.ENDED || _ref === mve.PS.UNSTARTED) {
        this.player.playVideo();
        console.log("playVideo");
      } else if ((_ref1 = this.options.playerState()) === mve.PS.PLAYING) {
        this.player.pauseVideo();
        console.log("pauseVideo");
      }
      return mve.disableEvent(ev);
    },
    "{window} keydown": function(el, ev) {
      var LEFT, RIGHT, SPACE, keyCode;
      keyCode = ev.keyCode;
      LEFT = 37;
      RIGHT = 39;
      SPACE = 32;
      if (keyCode === SPACE) {
        this.togglePlayPause();
        return mve.disableEvent(ev);
      } else if (keyCode === LEFT) {
        this.player.pauseVideo();
        this.player.seekTo(this.player.getCurrentTime() - this.SMALL_SEEK);
        return mve.disableEvent(ev);
      } else if (keyCode === RIGHT) {
        this.player.pauseVideo();
        this.player.seekTo(this.player.getCurrentTime() + this.SMALL_SEEK);
        return mve.disableEvent(ev);
      }
    },
    togglePlayPause: function() {
      if (this.options.playerState() === mve.PS.PLAYING) {
        return this.player.pauseVideo();
      } else {
        return this.player.playVideo();
      }
    }
  });

}).call(this);
