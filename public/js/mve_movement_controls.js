// Generated by CoffeeScript 1.7.1
(function() {
  mve.MVE_MovementControls = mve.MVE_Plugin.extend({
    defaults: {
      newMoveSelector: ".new-move",
      saveMoveSelector: ".new-move-save",
      cancelMoveSelector: ".new-move-cancel",
      chainMoveSelector: ".new-move-chain",
      setTimeSelector: ".set-time",
      cancelTimeSelector: ".cancel-time",
      playMoveSelector: '.play-move',
      loopMoveSelector: '.loop-move',
      moveDataSelector: '.movement-data',
      editStartSelector: ".edit-start",
      editEndSelector: ".edit-end"
    }
  }, {
    init: function(element, options) {
      this._super();
      this.options.newMovementCover = this.element.find(".new-movement.cover");
      this.options.newMovementContent = this.element.find(".new-movement.content").hide();
      this.options.currentMovement = new mve.Movement({
        startTime: "---",
        endTime: "---",
        name: "New Movement",
        saved: false,
        tempTime: -1,
        tempStart: false,
        tempEnd: false
      });
      this.options.viewData.attr('currentMovement', this.options.currentMovement);
      this.startHandleData = this.app.options.startHandleData;
      this.endHandleData = this.app.options.endHandleData;
      this.handleMiddle = this.app.options.handleMiddle;
      this.options.startTimeEl = this.element.find(".start");
      this.options.endTimeEl = this.element.find(".end");
      this.options.editStartTimeButton = this.options.startTimeEl.find('.edit-time');
      this.options.editEndTimeButton = this.options.endTimeEl.find('.edit-time');
      this.options.startTimeButtons = this.options.startTimeEl.find('.time-button-wrap').hide();
      this.options.endTimeButtons = this.options.endTimeEl.find('.time-button-wrap').hide();
      this.options.showMovementPlayButtons = can.compute(false);
      this.options.viewData.attr('showMovementPlayButtons', this.options.showMovementPlayButtons);
      this.app.setupState(this.NMS);
      this.options.newMoveState = can.compute();
      this.options.newMoveState(this.NMS.NONE);
      this.app.setupState(this.PMS);
      this.options.playMoveState = can.compute();
      this.options.playMoveState(this.PMS.NONE);
      this.on();
      this.options.playMoveState(this.PMS.NONE);
      return this.options.newMoveState(this.NMS.DONE);
    },
    NMS: {
      NONE: {
        enter: function(_this) {
          return jQuery.when(_this.options.newMovementCover.show(), _this.options.newMovementContent.hide(), _this.updateHandleVisiblity());
        },
        leave: function(_this) {
          return jQuery.when(_this.options.newMovementCover.hide(), _this.options.newMovementContent.show(), _this.updateHandleVisiblity());
        }
      },
      START: {
        enter: function(_this) {
          _this.options.startTimeButtons.show();
          _this.options.editStartTimeButton.hide();
          _this.options.currentMovement.attr('tempStart', true);
          _this.options.startTimeEl.addClass('show-buttons');
          return jQuery.when();
        },
        leave: function(_this) {
          _this.options.editStartTimeButton.show();
          _this.options.startTimeButtons.hide();
          _this.options.currentMovement.attr('tempStart', false);
          _this.options.startTimeEl.removeClass('show-buttons');
          return jQuery.when();
        }
      },
      END: {
        enter: function(_this) {
          _this.options.endTimeButtons.show();
          _this.options.editEndTimeButton.hide();
          _this.options.currentMovement.attr('tempEnd', true);
          _this.options.endTimeEl.addClass('show-buttons');
          return jQuery.when();
        },
        leave: function(_this) {
          _this.options.editEndTimeButton.show();
          _this.options.endTimeButtons.hide();
          _this.options.currentMovement.attr('tempEnd', false);
          _this.options.endTimeEl.removeClass('show-buttons');
          return jQuery.when();
        }
      },
      DONE: {
        enter: function(_this) {
          return jQuery.when(_this.options.newMovementCover.hide(), _this.options.newMovementContent.show());
        }
      }
    },
    onPlayerReady: function() {
      this._super();
      return this.dev_setupPMS();
    },
    onPlayerInterval: function() {
      var _ref;
      if ((_ref = this.options.newMoveState()) === this.NMS.START || _ref === this.NMS.END) {
        this.options.currentMovement.attr('tempTime', this.player.getCurrentTime());
      }
      return this.handlePlayMoveStateInterval();
    },
    updateMovementPlayControls: function() {
      return this.options.showMovementPlayButtons(this.options.currentMovement.isValid());
    },
    updateHandles: function() {},
    "{currentMovement} change": function(currentMovement, obj, attr, ev, newVal, oldVal) {
      if (attr === 'startTime') {
        this.updateHandle(this.startHandleData, newVal);
      }
      if (attr === 'endTime') {
        return this.updateHandle(this.endHandleData, newVal);
      }
    },
    updateHandle: function(handle, time) {
      handle.attr('time', time);
      handle.attr('left', "" + (time / this.duration * 100) + "%");
      handle.attr('show', true);
      return this.updateHandleMiddle();
    },
    shouldShowHandle: function(handle) {
      var result;
      result = false;
      if (this.options.newMoveState() === this.NMS.NONE) {
        result = false;
        return result;
      }
      result = handle.time >= 0;
      return result;
    },
    updateHandleVisiblity: function() {
      this.startHandleData.attr('show', this.shouldShowHandle(this.startHandleData));
      this.endHandleData.attr('show', this.shouldShowHandle(this.endHandleData));
      return this.handleMiddle.attr('show', this.startHandleData.attr('show') && this.endHandleData.attr('show'));
    },
    updateHandleMiddle: function() {
      var endTime, smallerVal, startTime, timeDifference;
      startTime = this.options.currentMovement.startTime;
      endTime = this.options.currentMovement.endTime;
      if (!((startTime != null) && (endTime != null))) {
        return;
      }
      timeDifference = Math.abs(endTime - startTime);
      smallerVal = startTime < endTime ? startTime : endTime;
      this.handleMiddle.attr('left', "" + (smallerVal / this.duration * 100) + "%");
      this.handleMiddle.attr('width', "" + (timeDifference / this.duration * 100) + "%");
      return this.handleMiddle.attr('show', this.startHandleData.attr('show') && this.endHandleData.attr('show'));
    },
    "{newMoveState} change": function(newMoveState, ev, newState, oldState) {
      var _this;
      _this = this;
      if (newState !== this.NMS.NONE) {
        this.options.playMoveState(this.PMS.NONE);
      }
      return this.app.handleStateChange(_this, newState, oldState);
    },
    "{editStartSelector} click": function(el, ev) {
      mve.disableEvent(ev);
      return this.options.newMoveState(this.NMS.START);
    },
    "{editEndSelector} click": function(el, ev) {
      mve.disableEvent(ev);
      return this.options.newMoveState(this.NMS.END);
    },
    "{newMoveSelector} click": function(el, ev) {
      mve.disableEvent(ev);
      return this.options.newMoveState(this.NMS.DONE);
    },
    "{cancelMoveSelector} click": function(el, ev) {
      mve.disableEvent(ev);
      return this.options.newMoveState(this.NMS.NONE);
    },
    "{saveMoveSelector} click": function(el, ev) {
      return mve.disableEvent(ev);
    },
    "{chainMoveSelector} click": function(el, ev) {
      return mve.disableEvent(ev);
    },
    "{cancelTimeSelector} click": function(el, ev) {
      mve.disableEvent(ev);
      return this.options.newMoveState(this.NMS.DONE);
    },
    "{setTimeSelector} click": function(el, ev) {
      var endTime;
      mve.disableEvent(ev);
      if (this.options.newMoveState() === this.NMS.START) {
        this.options.currentMovement.setStart(this.player.getCurrentTime(), this.duration);
        this.updateMovementPlayControls();
        endTime = parseInt(this.options.currentMovement.attr('endTime'));
        if (Number.isNaN(endTime)) {
          this.options.newMoveState(this.NMS.END);
        } else {
          this.options.newMoveState(this.NMS.DONE);
        }
        return;
      }
      if (this.options.newMoveState() === this.NMS.END) {
        this.options.currentMovement.setEnd(this.player.getCurrentTime(), this.duration);
        this.updateMovementPlayControls();
        this.options.newMoveState(this.NMS.DONE);
      }
    },
    saveNewMovement: function() {},
    dev_setupPMS: function() {
      this.options.currentMovement.attr('startTime', 10);
      this.options.currentMovement.attr('endTime', 13);
      this.options.currentMovement.isValid();
      return this.options.newMoveState(this.NMS.DONE);
    },
    PMS: {
      NONE: {},
      DONE: {},
      PLAYING: {
        enter: function(_this) {
          _this.element.find('.play-move').addClass('selected');
          return jQuery.when();
        },
        leave: function(_this) {
          _this.element.find('.play-move').removeClass('selected');
          return jQuery.when();
        }
      },
      PAUSE_POINT: {}
    },
    "{playMoveState} change": function(playMoveState, ev, newState, oldState) {
      var _this;
      _this = this;
      if (newState !== this.PMS.NONE) {
        this.options.newMoveState(this.PMS.DONE);
      }
      return this.app.handleStateChange(_this, newState, oldState);
    },
    "{playMoveSelector} click": function(el, ev) {
      mve.disableEvent(ev);
      return this.handleMovePlay();
    },
    "{loopMoveSelector} click": function(el, ev) {
      var looping;
      mve.disableEvent(ev);
      looping = this.options.currentMovement.looping;
      return this.options.currentMovement.attr('looping', !looping);
    },
    handleMovePlay: function() {
      this.options.playMoveState(this.PMS.PLAYING);
      this.player.seekTo(this.options.currentMovement.startTime);
      return this.player.playVideo();
    },
    cancelMovePlay: function() {
      this.options.currentMovement.attr('looping', false);
      return this.options.playMoveState(this.PMS.NONE);
    },
    handlePlayMoveStateInterval: function() {
      if (this.options.playMoveState() === this.PMS.PLAYING) {
        if (this.player.getCurrentTime() > this.options.currentMovement.endTime) {
          if (this.options.currentMovement.attr('looping')) {
            return this.handleMovePlay();
          } else {
            this.options.playMoveState(this.PMS.NONE);
            return this.player.pauseVideo();
          }
        }
      }
    },
    "{window} keypress": function(el, ev) {
      var L, R, keyCode;
      keyCode = ev.keyCode;
      if (keyCode === 13) {
        this.handleMovePlay();
        return;
      }
      R = 114;
      return L = 108;
    },
    setPlayingMovement: function(movement) {},
    setHandlesToMovement: function(movement) {},
    setMoveToPlaying: function(movement) {}
  });

}).call(this);
