// Generated by CoffeeScript 1.7.1
(function() {
  mve.MVE_SliderControls = mve.MVE_Plugin.extend({
    defaults: {
      playerSliderSelector: ".slider-bar"
    }
  }, {
    init: function(element, options) {
      var viewData;
      this._super();
      viewData = this.options.viewData;
      this.mouseenterSlider = false;
      this.sliderLabels = new can.List();
      viewData.attr('sliderLabels', this.sliderLabels);
      this.app.options.slider = this.element.find(this.options.playerSliderSelector);
      this.app.options.sliderProgressBar = this.element.find('.slider-progress');
      this.app.options.loadedBar = this.element.find('.slider-loaded');
      this.app.options.sliderMouser = this.element.find(".slider-mouser");
      this.app.options.sliderBubble = this.element.find(".slider-bubble");
      this.options.sliderBubbleData = new can.Map({
        show: false,
        left: false,
        time: false,
        src: void 0,
        backgroundSize: "400px 300px",
        backgroundPosition: "0 0",
        highQuality: true
      });
      viewData.attr('sliderBubbleData', this.options.sliderBubbleData);
      this.options.sighDataLoaded = can.compute(false);
      return this.options.sighData = new can.Map({
        sigh: false,
        base: false
      });
    },
    onPlayerReady: function() {
      this._super();
      return this.labelSliderBar();
    },
    onPlayerInterval: function() {
      var currentTime, loadedPercentage, percentage;
      this._super();
      currentTime = this.player.getCurrentTime();
      percentage = "" + (this.percentForTime(currentTime) * 100) + "%";
      this.app.options.sliderProgressBar.width(percentage);
      loadedPercentage = "" + (this.player.getVideoLoadedFraction() * 100) + "%";
      return this.app.options.loadedBar.width(loadedPercentage);
    },
    onPlayerStateChange: function(newState, oldState) {
      return this._super();
    },
    labelSliderBar: function() {},
    labelSliderBar: function() {
      var sliderBar, width;
      sliderBar = this.element.find('.slider-bar');
      return width = sliderBar.width();
    },
    "{playerSliderSelector} click": function(el, ev) {
      var clickWidth, percentage, sliderWidth, timeFromPercent;
      this.movementControls().cancelMovePlay();
      mve.disableEvent(ev);
      sliderWidth = this.app.options.slider.width();
      clickWidth = event.pageX - this.app.options.slider.offset().left;
      percentage = clickWidth / sliderWidth;
      timeFromPercent = this.duration * percentage;
      if (this.options.playerState() === mve.PS.UNSTARTED) {
        this.player.playVideo();
      }
      return this.player.seekTo(timeFromPercent);
    },
    "{playerSliderSelector} mouseenter": function(el, ev) {
      this.mouseenterSlider = true;
      this.app.options.sliderMouser.removeClass('hide');
      return this.options.sliderBubbleData.attr('show', true);
    },
    "{playerSliderSelector} mousemove": function(el, ev) {
      var mouseX, x;
      if (this.mouseenterSlider) {
        x = el.offset().left;
        mouseX = ev.clientX;
        this.app.options.sliderMouser.css('left', "" + (mouseX - x - this.app.options.sliderMouser.width() / 2) + "px");
        this.options.sliderBubbleData.attr('time', mve.timeInMinsSeconds(this.timeFromX(mouseX - x)));
        return this.options.sliderBubbleData.attr('left', "" + (mouseX - x - this.element.find('.slider-bubble').width() / 2) + "px");
      }
    },
    percentForTime: function(timeInSeconds) {
      return timeInSeconds / this.player.getDuration();
    },
    timeFromX: function(x) {
      var percentage, time, totalWidth;
      totalWidth = this.app.options.slider.width();
      percentage = x / totalWidth;
      time = this.duration * percentage;
      return time;
    },
    "{playerSliderSelector} mouseleave": function(el, ev) {
      this.mouseenterSlider = false;
      this.app.options.sliderMouser.addClass('hide');
      return this.options.sliderBubbleData.attr('show', false);
    },
    loadSighData: function() {
      var _this;
      _this = this;
      return $.get('/sigh/' + this.app.options.videoId, function(data) {
        if (data.statusCode === 200) {
          _this.options.sighData.attr('base', data.base);
          _this.options.sighData.attr('sigh', data.sigh);
          _this.options.sighDataLoaded(true);
          return console.log("sighDataLoaded");
        } else {
          return console.error("Can't get sigh with error: " + data.statusCode);
        }
      });
    },
    setSighImg: function(time) {
      var backgroundPosition, backgroundX, backgroundY, base, frameLength, frameNumber, sigh, sliderBubble, spriteCol, spriteIndex, spriteRow, src, storyboardMax, storyboardNumber, tileHeight, tileWidth;
      if (!this.options.sighDataLoaded()) {
        console.error("Sigh data not loaded");
      }
      base = this.options.sighData.attr('base');
      sigh = this.options.sighData.attr('sigh');
      storyboardNumber = 1;

      /*
      
      		here's how I think it works
      
      
      		if there are less then 250 seconds in a movie, then each frame
      		is given 2 seconds and the frame number is Math.floor(time/2)
      		frameLength = 2
      		frameNumber = Math.floor( time / frameLength)
      
      		if there are more than 250 seconds in a movie, then each 
      		frameLength = duration / 125 frames 
      		frameNumber = Math.floor( time / frameLength )
      
      		Then if the movies even longer I have no damn clue...
       */
      frameNumber = -1;
      frameLength = -1;
      if (this.duration <= 250) {
        frameLength = 2;
      } else if (this.duration < 1200) {
        frameLength = this.duration / 125;
      }
      frameNumber = Math.floor((time + 1) / frameLength);
      if (frameNumber <= 0) {
        frameNumber = 1;
      }
      spriteIndex = frameNumber % 25;
      spriteRow = Math.floor(spriteIndex / 5);
      spriteCol = spriteIndex % 5;
      sliderBubble = this.element.find(".slider-bubble .bubble-img");
      tileWidth = sliderBubble.width();
      tileHeight = sliderBubble.height();
      backgroundX = "" + (-tileWidth * spriteCol) + "px";
      backgroundY = "" + (-tileHeight * spriteRow) + "px";
      backgroundPosition = "" + backgroundX + " " + backgroundY;
      this.options.sliderBubbleData.attr('backgroundSize', "" + (tileWidth * 5) + "px " + (tileHeight * 5) + "px");
      this.options.sliderBubbleData.attr('backgroundPosition', backgroundPosition);
      storyboardMax = this.duration < 60 * 20 ? 5 : time / (60 * 4);
      storyboardNumber = Math.floor(frameNumber / 25);
      console.log({
        storyboardNumber: storyboardNumber,
        frameNumber: spriteIndex
      });
      src = "" + base + storyboardNumber + ".jpg?sigh=" + sigh;
      return this.options.sliderBubbleData.attr('src', src);
    },
    getSighPosition: function(time) {}
  });

}).call(this);
